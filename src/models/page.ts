// Generated by https://quicktype.io

export interface Page {
    do_objectID: string;
    booleanOperation: number;
    isFixedToViewport: boolean;
    isFlippedHorizontal: boolean;
    isFlippedVertical: boolean;
    isLocked: boolean;
    isVisible: boolean;
    layerListExpandedType: number;
    maintainScrollPosition: boolean;
    name: string;
    nameIsFixed: boolean;
    resizingConstraint: number;
    resizingType: number;
    rotation: number;
    shouldBreakMaskChain: boolean;
    userInfo: Object;
    exportOptions: ExportOptions;
    frame: Frame;
    clippingMaskMode: number;
    hasClippingMask: boolean;
    style: Style;
    hasClickThrough: boolean;
    groupLayout: GroupLayout;
    layers: Artboard | SymbolMasterLayer | RectangleLayer | TextLayer;
    includeInCloudUpload: boolean;
    horizontalRulerData: RulerData;
    verticalRulerData: RulerData;
}

export interface ExportOptions {
    includedLayerIds: string[];
    layerOptions: number;
    shouldTrim: boolean;
    exportFormats: any[];
}

export interface Frame {
    _class: string;
    constrainProportions: boolean;
    height: number;
    width: number;
    x: number;
    y: number;
}

export interface GroupLayout {
}

export interface RulerData {
    base: number;
    guides: any[];
}

export interface Layer {
    do_objectID: string;
    booleanOperation: number;
    isFixedToViewport: boolean;
    isFlippedHorizontal: boolean;
    isFlippedVertical: boolean;
    isLocked: boolean;
    isVisible: boolean;
    layerListExpandedType: number;
    maintainScrollPosition: boolean;
    name: string;
    nameIsFixed: boolean;
    resizingConstraint: number;
    resizingType: number;
    rotation: number;
    shouldBreakMaskChain: boolean;
    exportOptions: ExportOptions;
    frame: Frame;
    clippingMaskMode: number;
    hasClippingMask: boolean;
    style: Style;
    hasClickThrough: boolean;
    groupLayout: GroupLayout;
    layers: Artboard | SymbolMasterLayer | RectangleLayer | TextLayer;
    hasBackgroundColor: boolean;
    includeBackgroundColorInExport: boolean;
    includeInCloudUpload: boolean;
    isFlowHome: boolean;
    presetDictionary: Object;
    resizesContent: boolean;
    backgroundColor: Color;
    horizontalRulerData: RulerData;
    verticalRulerData: RulerData;
}

export interface Artboard extends Layer { }

export interface SymbolMasterLayer extends Layer {
    includeBackgroundColorInInstance: boolean;
    symbolID: string;
    changeIdentifier: number;
    overrideProperties: OverrideProperty[] | any[];
    allowsOverrides: boolean;
}

export interface TextLayer {
    do_objectID: string;
    booleanOperation: number;
    isFixedToViewport: boolean;
    isFlippedHorizontal: boolean;
    isFlippedVertical: boolean;
    isLocked: boolean;
    isVisible: boolean;
    layerListExpandedType: number;
    maintainScrollPosition: boolean;
    name: string;
    nameIsFixed: boolean;
    resizingConstraint: number;
    resizingType: number;
    rotation: number;
    shouldBreakMaskChain: boolean;
    userInfo: Object;
    exportOptions: ExportOptions;
    frame: Frame;
    clippingMaskMode: number;
    hasClippingMask: boolean;
    sharedStyleID: string;
    style: Style;
    attributedString?: AttributedString;
    automaticallyDrawOnUnderlyingPath?: boolean;
    dontSynchroniseWithSymbol?: boolean;
    glyphBounds?: string;
    lineSpacingBehaviour?: number;
    textBehaviour?: number;
    edited?: boolean;
    isClosed?: boolean;
    pointRadiusBehaviour?: number;
    points?: CurvePoint[];
    fixedRadius?: number;
    needsConvertionToNewRoundCorners?: boolean;
    hasConvertedToNewRoundCorners?: boolean;
}

export interface RectangleLayer extends TextLayer {
}



export interface Color {
    alpha: number;
    blue: number;
    green: number;
    red: number;
}





export interface AttributedString {
    string: string;
    attributes: StringAttribute[];
}

export interface Attribute {

}

export interface StringAttribute extends Attribute {
    location: number;
    length: number;
    attributes: TextAttributes;
}

export interface FontDescriptor {
    attributes: { name: string, size: number };
}

export interface ParagraphStyle {
    alignment: number;
    maximumLineHeight: number;
    minimumLineHeight: number;
    tighteningFactorForTruncation?: number;
    allowsDefaultTighteningForTruncation?: number;
}

export interface CurvePoint {
    cornerRadius: number;
    curveFrom: string;
    curveMode: number;
    curveTo: string;
    hasCurveFrom: boolean;
    hasCurveTo: boolean;
    point: string;
}

export interface Style {
    do_objectID: string;
    endMarkerType: number;
    miterLimit: number;
    startMarkerType: number;
    windingRule: number;
    blur: Blur;
    borderOptions: BorderOptions;
    borders: any[];
    colorControls: ColorControls;
    contextSettings: GraphicsContextSettings;
    fills: Fill[];
    innerShadows: any[];
    shadows: any[];
    textStyle?: TextStyle;
}

export interface Blur {
    isEnabled: boolean;
    center: { x: number, y: number };
    motionAngle: number;
    radius: number;
    saturation: number;
    type: number;
}

export interface BorderOptions {
    isEnabled: boolean;
    dashPattern: any[];
    lineCapStyle: number;
    lineJoinStyle: number;
}

export interface ColorControls {
    isEnabled: boolean;
    brightness: number;
    contrast: number;
    hue: number;
    saturation: number;
}

export interface ContextSettings { }

export interface GraphicsContextSettings extends ContextSettings {
    blendMode: number;
    opacity: number;
}

export interface Fill {
    isEnabled: boolean;
    fillType: number;
    color: Color;
    contextSettings: GraphicsContextSettings;
    gradient: Gradient;
    noiseIndex: number;
    noiseIntensity: number;
    patternFillType: number;
    patternTileScale: number;
}

export interface Gradient {
    elipseLength: number;
    from: string;
    gradientType: number;
    to: string;
    stops: GradientStop[];
}

export interface GradientStop {
    position: number;
    color: Color;
}

export interface TextAttributes {
    underlineStyle?: number;
    MSAttributedStringTextTransformAttribute?: number;
    paragraphStyle: ParagraphStyle;
    strikethroughStyle?: number;
    kerning?: number;
    MSAttributedStringFontAttribute: FontDescriptor;
    MSAttributedStringColorAttribute: Color;
    textStyleVerticalAlignmentKey?: number;
}

export interface TextStyle {
    encodedAttributes: TextAttributes;
    verticalAlignment: number;
}

export interface OverrideProperty {
    canOverride: boolean;
    overrideName: string;
}
