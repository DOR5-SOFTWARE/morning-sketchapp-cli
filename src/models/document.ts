// Generated by https://quicktype.io

export interface Document {
    _class:                 string;
    assets:                 Assets;
    colorSpace:             number;
    currentPageIndex:       number;
    do_objectID:            string;
    enableLayerInteraction: boolean;
    enableSliceInteraction: boolean;
    foreignLayerStyles:     ForeignLayerStyle[];
    foreignSymbols:         ForeignSymbol[];
    foreignTextStyles:      ForeignTextStyle[];
    layerStyles:            LayerS;
    layerSymbols:           LayerS;
    layerTextStyles:        LayerTextStyles;
    pages:                  Age[];
}

export interface Assets {
    _class:          string;
    colorAssets:     ColorAsset[];
    colors:          Color[];
    gradients:       any[];
    imageCollection: ImageCollection;
    images:          any[];
}

export interface ColorAsset {
    _class: ColorAssetClass;
    color:  Color;
}

export enum ColorAssetClass {
    MSImmutableColorAsset = "MSImmutableColorAsset",
}

export interface Color {
    _class:       ColorClass;
    alpha:        number;
    blue:         number;
    green:        number;
    red:          number;
    do_objectID?: string;
}

export enum ColorClass {
    Color = "color",
}

export interface ImageCollection {
    _class: string;
    images: Images;
}

export interface Images {
}

export interface ForeignLayerStyle {
    _class:            ForeignLayerStyleClass;
    libraryID:         ForeignLayerStyleLibraryID;
    localSharedStyle:  LocalSharedStyle;
    remoteStyleID:     string;
    sourceLibraryName: string;
    symbolPrivate:     boolean;
}

export enum ForeignLayerStyleClass {
    MSImmutableForeignLayerStyle = "MSImmutableForeignLayerStyle",
}

export enum ForeignLayerStyleLibraryID {
    C461F3FfD618449897Ba4Ba2196D5Bee = "C461F3FF-D618-4498-97BA-4BA2196D5BEE",
    Df93Bc63Ca47471FBd30Cbc2A26A4A71 = "DF93BC63-CA47-471F-BD30-CBC2A26A4A71",
    The8733Ffc44B0F40718Ea3C609077E9A4F = "8733FFC4-4B0F-4071-8EA3-C609077E9A4F",
}

export interface LocalSharedStyle {
    _class:      LocalSharedStyleClass;
    do_objectID: string;
    name:        string;
    value:       ObjectValue;
}

export enum LocalSharedStyleClass {
    SharedStyle = "sharedStyle",
}

export interface ObjectValue {
    _class:           ValueClassEnum;
    endMarkerType:    number;
    fills?:           Fill[];
    miterLimit:       number;
    shadows?:         Shadow[];
    startMarkerType:  number;
    windingRule:      number;
    borderOptions?:   BorderOptions;
    borders?:         Border[];
    contextSettings?: ContextSettings;
    innerShadows?:    Shadow[];
}

export enum ValueClassEnum {
    Style = "style",
}

export interface BorderOptions {
    _class:        BorderOptionsClass;
    dashPattern:   any[];
    isEnabled:     boolean;
    lineCapStyle:  number;
    lineJoinStyle: number;
    do_objectID?:  string;
}

export enum BorderOptionsClass {
    BorderOptions = "borderOptions",
}

export interface Border {
    _class:    BorderClass;
    color:     Color;
    fillType:  number;
    isEnabled: boolean;
    position:  number;
    thickness: number;
    gradient?: Gradient;
}

export enum BorderClass {
    Border = "border",
}

export interface Gradient {
    _class:       GradientClass;
    elipseLength: number;
    from:         From;
    gradientType: number;
    stops:        Stop[];
    to:           To;
}

export enum GradientClass {
    Gradient = "gradient",
}

export enum From {
    The01 = "{0, 1}",
    The05029609374999999999 = "{0.5, -0.29609374999999999}",
    The099101336705202314049101336705202303 = "{0.99101336705202314, 0.49101336705202303}",
    The099999999999999978049999999999999983 = "{0.99999999999999978, 0.49999999999999983}",
    The113994140625084499999999999997 = "{1.13994140625, -0.84499999999999997}",
}

export interface Stop {
    _class:   StopClass;
    color:    Color;
    position: number;
}

export enum StopClass {
    GradientStop = "gradientStop",
}

export enum To {
    The00089866329479768581049101336705202342 = "{0.0089866329479768581, 0.49101336705202342}",
    The01 = "{0, 1}",
    The051 = "{0.5, 1}",
    The059121658236994223049999999999999983 = "{0.59121658236994223, 0.49999999999999983}",
    The10 = "{1, 0}",
}

export interface ContextSettings {
    _class:       ContextSettingsClass;
    blendMode:    number;
    opacity:      number;
    do_objectID?: string;
}

export enum ContextSettingsClass {
    GraphicsContextSettings = "graphicsContextSettings",
}

export interface Fill {
    _class:           FillClass;
    color:            Color;
    fillType:         number;
    gradient?:        Gradient;
    isEnabled:        boolean;
    noiseIndex:       number;
    noiseIntensity:   number;
    patternFillType:  number;
    patternTileScale: number;
    image?:           Age;
}

export enum FillClass {
    Fill = "fill",
}

export interface Age {
    _class:     PageClass;
    _ref:       string;
    _ref_class: RefClass;
}

export enum PageClass {
    MSJSONFileReference = "MSJSONFileReference",
}

export enum RefClass {
    MSImageData = "MSImageData",
    MSImmutablePage = "MSImmutablePage",
}

export interface Shadow {
    _class:          InnerShadowClass;
    blurRadius:      number;
    color:           Color;
    contextSettings: ContextSettings;
    isEnabled:       boolean;
    offsetX:         number;
    offsetY:         number;
    spread:          number;
}

export enum InnerShadowClass {
    InnerShadow = "innerShadow",
    Shadow = "shadow",
}

export interface ForeignSymbol {
    _class:            ForeignSymbolClass;
    libraryID:         ForeignLayerStyleLibraryID;
    originalMaster:    OriginalMaster;
    sourceLibraryName: string;
    symbolMaster:      SymbolMaster;
    symbolPrivate:     boolean;
}

export enum ForeignSymbolClass {
    MSImmutableForeignSymbol = "MSImmutableForeignSymbol",
}

export interface OriginalMaster {
    _class:                           OriginalMasterClass;
    allowsOverrides:                  boolean;
    backgroundColor:                  Color;
    booleanOperation:                 number;
    changeIdentifier:                 number;
    clippingMaskMode:                 number;
    do_objectID:                      string;
    exportOptions:                    ExportOptions;
    frame:                            Frame;
    groupLayout:                      OriginalMasterGroupLayout;
    hasBackgroundColor:               boolean;
    hasClickThrough:                  boolean;
    hasClippingMask:                  boolean;
    horizontalRulerData:              AlRulerData;
    includeBackgroundColorInExport:   boolean;
    includeBackgroundColorInInstance: boolean;
    includeInCloudUpload:             boolean;
    isFixedToViewport:                boolean;
    isFlippedHorizontal:              boolean;
    isFlippedVertical:                boolean;
    isFlowHome:                       boolean;
    isLocked:                         boolean;
    isVisible:                        boolean;
    layerListExpandedType:            number;
    layers:                           OriginalMasterLayer[];
    name:                             string;
    nameIsFixed:                      boolean;
    originalObjectID?:                string;
    overrideProperties:               OverrideProperty[];
    resizesContent:                   boolean;
    resizingConstraint:               number;
    resizingType:                     number;
    rotation:                         number;
    shouldBreakMaskChain:             boolean;
    style:                            ValueClass;
    symbolID:                         string;
    userInfo:                         OriginalMasterUserInfo;
    verticalRulerData:                AlRulerData;
    sharedStyleID?:                   string;
    grid?:                            Grid;
    layout?:                          Layout;
}

export enum OriginalMasterClass {
    SymbolMaster = "symbolMaster",
}

export interface ExportOptions {
    _class:           ExportOptionsClass;
    exportFormats:    ExportFormat[];
    includedLayerIds: any[];
    layerOptions:     number;
    shouldTrim:       boolean;
    do_objectID?:     string;
}

export enum ExportOptionsClass {
    ExportOptions = "exportOptions",
}

export interface ExportFormat {
    _class:           ExportFormatClass;
    absoluteSize:     number;
    fileFormat:       FileFormat;
    name:             string;
    namingScheme:     number;
    scale:            number;
    visibleScaleType: number;
}

export enum ExportFormatClass {
    ExportFormat = "exportFormat",
}

export enum FileFormat {
    SVG = "svg",
}

export interface Frame {
    _class:               FrameClass;
    constrainProportions: boolean;
    do_objectID?:         string;
    height:               number;
    width:                number;
    x:                    number;
    y:                    number;
}

export enum FrameClass {
    Rect = "rect",
}

export interface Grid {
    _class:         string;
    gridSize:       number;
    isEnabled:      boolean;
    thickGridTimes: number;
}

export interface OriginalMasterGroupLayout {
    _class:       GroupLayoutClass;
    do_objectID?: string;
}

export enum GroupLayoutClass {
    MSImmutableFreeformGroupLayout = "MSImmutableFreeformGroupLayout",
}

export interface AlRulerData {
    _class:       HorizontalRulerDataClass;
    base:         number;
    do_objectID?: string;
    guides:       number[];
}

export enum HorizontalRulerDataClass {
    RulerData = "rulerData",
}

export interface OriginalMasterLayer {
    _class:                             LayerClass;
    booleanOperation:                   number;
    clippingMaskMode:                   number;
    do_objectID:                        string;
    exportOptions:                      ExportOptions;
    frame:                              Frame;
    groupLayout?:                       LayerGroupLayout;
    hasClickThrough?:                   boolean;
    hasClippingMask:                    boolean;
    isFixedToViewport:                  boolean;
    isFlippedHorizontal:                boolean;
    isFlippedVertical:                  boolean;
    isLocked:                           boolean;
    isVisible:                          boolean;
    layerListExpandedType:              number;
    layers?:                            PurpleLayer[];
    name:                               string;
    nameIsFixed:                        boolean;
    resizingConstraint:                 number;
    resizingType:                       number;
    rotation:                           number;
    sharedStyleID?:                     string;
    shouldBreakMaskChain:               boolean;
    style:                              FluffyStyle;
    userInfo?:                          StickyUserInfo;
    windingRule?:                       number;
    edited?:                            boolean;
    fixedRadius?:                       number;
    hasConvertedToNewRoundCorners?:     boolean;
    isClosed?:                          boolean;
    pointRadiusBehaviour?:              number;
    points?:                            Point[];
    horizontalSpacing?:                 number;
    overrideValues?:                    OverrideValue[];
    scale?:                             number;
    symbolID?:                          string;
    verticalSpacing?:                   number;
    attributedString?:                  PurpleAttributedString;
    automaticallyDrawOnUnderlyingPath?: boolean;
    dontSynchroniseWithSymbol?:         boolean;
    glyphBounds?:                       string;
    lineSpacingBehaviour?:              number;
    textBehaviour?:                     number;
    clippingMask?:                      string;
    fillReplacesImage?:                 boolean;
    image?:                             Age;
    intendedDPI?:                       number;
    originalObjectID?:                  string;
    isEquilateral?:                     boolean;
}

export enum LayerClass {
    Bitmap = "bitmap",
    Group = "group",
    Oval = "oval",
    Rectangle = "rectangle",
    ShapeGroup = "shapeGroup",
    ShapePath = "shapePath",
    SymbolInstance = "symbolInstance",
    Text = "text",
    Triangle = "triangle",
}

export interface PurpleAttributedString {
    _class:     AttributedStringClass;
    attributes: PurpleAttribute[];
    string:     string;
}

export enum AttributedStringClass {
    AttributedString = "attributedString",
}

export interface PurpleAttribute {
    _class:     AttributeClass;
    attributes: EncodedAttributesClass;
    length:     number;
    location:   number;
}

export enum AttributeClass {
    StringAttribute = "stringAttribute",
}

export interface EncodedAttributesClass {
    MSAttributedStringColorAttribute: Color;
    MSAttributedStringFontAttribute:  MSAttributedStringFontAttribute;
    paragraphStyle:                   PurpleParagraphStyle;
    kerning?:                         number;
    textStyleVerticalAlignmentKey?:   number;
}

export interface MSAttributedStringFontAttribute {
    _class:     MSAttributedStringFontAttributeClass;
    attributes: MSAttributedStringFontAttributeAttributes;
}

export enum MSAttributedStringFontAttributeClass {
    FontDescriptor = "fontDescriptor",
}

export interface MSAttributedStringFontAttributeAttributes {
    name: AttributesName;
    size: number;
}

export enum AttributesName {
    Helvetica = "Helvetica",
    OpenSans = "OpenSans",
    OpenSansBold = "OpenSans-Bold",
    OpenSansSemibold = "OpenSans-Semibold",
    RobotoBold = "Roboto-Bold",
    RobotoMedium = "Roboto-Medium",
    RobotoRegular = "Roboto-Regular",
}

export interface PurpleParagraphStyle {
    _class:                                ParagraphStyleClass;
    alignment?:                            number;
    allowsDefaultTighteningForTruncation?: number;
    baseWritingDirection?:                 number;
    maximumLineHeight?:                    number;
    minimumLineHeight?:                    number;
    tighteningFactorForTruncation?:        number;
}

export enum ParagraphStyleClass {
    ParagraphStyle = "paragraphStyle",
}

export interface LayerGroupLayout {
    _class: GroupLayoutClass;
}

export interface PurpleLayer {
    _class:                             LayerClass;
    booleanOperation:                   number;
    clippingMaskMode:                   number;
    do_objectID:                        string;
    edited?:                            boolean;
    exportOptions:                      ExportOptions;
    frame:                              Frame;
    hasClippingMask:                    boolean;
    isClosed?:                          boolean;
    isFixedToViewport:                  boolean;
    isFlippedHorizontal:                boolean;
    isFlippedVertical:                  boolean;
    isLocked:                           boolean;
    isVisible:                          boolean;
    layerListExpandedType:              number;
    name:                               string;
    nameIsFixed:                        boolean;
    pointRadiusBehaviour?:              number;
    points?:                            Point[];
    resizingConstraint:                 number;
    resizingType:                       number;
    rotation:                           number;
    shouldBreakMaskChain:               boolean;
    style:                              PurpleStyle;
    userInfo?:                          TentacledUserInfo;
    fixedRadius?:                       number;
    hasConvertedToNewRoundCorners?:     boolean;
    sharedStyleID?:                     string;
    groupLayout?:                       LayerGroupLayout;
    hasClickThrough?:                   boolean;
    layers?:                            FluffyLayer[];
    horizontalSpacing?:                 number;
    overrideValues?:                    OverrideValue[];
    scale?:                             number;
    symbolID?:                          string;
    verticalSpacing?:                   number;
    attributedString?:                  PurpleAttributedString;
    automaticallyDrawOnUnderlyingPath?: boolean;
    dontSynchroniseWithSymbol?:         boolean;
    glyphBounds?:                       string;
    lineSpacingBehaviour?:              number;
    textBehaviour?:                     number;
    originalObjectID?:                  string;
    windingRule?:                       number;
    isEquilateral?:                     boolean;
}

export interface FluffyLayer {
    _class:                             LayerClass;
    booleanOperation:                   number;
    clippingMaskMode:                   number;
    do_objectID:                        string;
    exportOptions:                      ExportOptions;
    frame:                              Frame;
    groupLayout?:                       LayerGroupLayout;
    hasClickThrough?:                   boolean;
    hasClippingMask:                    boolean;
    isFixedToViewport:                  boolean;
    isFlippedHorizontal:                boolean;
    isFlippedVertical:                  boolean;
    isLocked:                           boolean;
    isVisible:                          boolean;
    layerListExpandedType:              number;
    layers?:                            TentacledLayer[];
    name:                               string;
    nameIsFixed:                        boolean;
    resizingConstraint:                 number;
    resizingType:                       number;
    rotation:                           number;
    sharedStyleID?:                     string;
    shouldBreakMaskChain:               boolean;
    style:                              ValueClass;
    userInfo?:                          FluffyUserInfo;
    windingRule?:                       number;
    edited?:                            boolean;
    fixedRadius?:                       number;
    hasConvertedToNewRoundCorners?:     boolean;
    isClosed?:                          boolean;
    pointRadiusBehaviour?:              number;
    points?:                            Point[];
    horizontalSpacing?:                 number;
    originalObjectID?:                  string;
    overrideValues?:                    OverrideValue[];
    scale?:                             number;
    symbolID?:                          string;
    verticalSpacing?:                   number;
    attributedString?:                  FluffyAttributedString;
    automaticallyDrawOnUnderlyingPath?: boolean;
    dontSynchroniseWithSymbol?:         boolean;
    glyphBounds?:                       string;
    lineSpacingBehaviour?:              number;
    textBehaviour?:                     number;
}

export interface FluffyAttributedString {
    _class:     AttributedStringClass;
    attributes: FluffyAttribute[];
    string:     string;
}

export interface FluffyAttribute {
    _class:     AttributeClass;
    attributes: PurpleAttributes;
    length:     number;
    location:   number;
}

export interface PurpleAttributes {
    MSAttributedStringColorAttribute: Color;
    MSAttributedStringFontAttribute:  MSAttributedStringFontAttribute;
    kerning:                          number;
    paragraphStyle:                   FluffyParagraphStyle;
}

export interface FluffyParagraphStyle {
    _class:    ParagraphStyleClass;
    alignment: number;
}

export interface TentacledLayer {
    _class:                             LayerClass;
    booleanOperation:                   number;
    clippingMaskMode:                   number;
    do_objectID:                        string;
    edited?:                            boolean;
    exportOptions:                      ExportOptions;
    frame:                              Frame;
    hasClippingMask:                    boolean;
    isClosed?:                          boolean;
    isFixedToViewport:                  boolean;
    isFlippedHorizontal:                boolean;
    isFlippedVertical:                  boolean;
    isLocked:                           boolean;
    isVisible:                          boolean;
    layerListExpandedType:              number;
    name:                               string;
    nameIsFixed:                        boolean;
    pointRadiusBehaviour?:              number;
    points?:                            Point[];
    resizingConstraint:                 number;
    resizingType:                       number;
    rotation:                           number;
    shouldBreakMaskChain:               boolean;
    style:                              ValueClass;
    userInfo?:                          FluffyUserInfo;
    sharedStyleID?:                     FluffySharedStyleID;
    fixedRadius?:                       number;
    hasConvertedToNewRoundCorners?:     boolean;
    horizontalSpacing?:                 number;
    overrideValues?:                    any[];
    scale?:                             number;
    symbolID?:                          string;
    verticalSpacing?:                   number;
    attributedString?:                  TentacledAttributedString;
    automaticallyDrawOnUnderlyingPath?: boolean;
    dontSynchroniseWithSymbol?:         boolean;
    glyphBounds?:                       string;
    lineSpacingBehaviour?:              number;
    textBehaviour?:                     number;
    groupLayout?:                       LayerGroupLayout;
    hasClickThrough?:                   boolean;
    layers?:                            StickyLayer[];
    windingRule?:                       number;
}

export interface TentacledAttributedString {
    _class:     AttributedStringClass;
    attributes: TentacledAttribute[];
    string:     string;
}

export interface TentacledAttribute {
    _class:     AttributeClass;
    attributes: FluffyAttributes;
    length:     number;
    location:   number;
}

export interface FluffyAttributes {
    MSAttributedStringColorAttribute: Color;
    MSAttributedStringFontAttribute:  MSAttributedStringFontAttribute;
    kerning:                          number;
    paragraphStyle:                   TentacledParagraphStyle;
    textStyleVerticalAlignmentKey:    number;
}

export interface TentacledParagraphStyle {
    _class:                               ParagraphStyleClass;
    alignment:                            number;
    allowsDefaultTighteningForTruncation: number;
    baseWritingDirection:                 number;
}

export interface StickyLayer {
    _class:                LayerClass;
    booleanOperation:      number;
    clippingMaskMode:      number;
    do_objectID:           string;
    edited:                boolean;
    exportOptions?:        ExportOptions;
    frame:                 Frame;
    hasClippingMask:       boolean;
    isClosed:              boolean;
    isFixedToViewport:     boolean;
    isFlippedHorizontal:   boolean;
    isFlippedVertical:     boolean;
    isLocked:              boolean;
    isVisible:             boolean;
    layerListExpandedType: number;
    name:                  LayerName;
    nameIsFixed:           boolean;
    pointRadiusBehaviour:  number;
    points:                Point[];
    resizingConstraint:    number;
    resizingType:          number;
    rotation:              number;
    sharedStyleID:         PurpleSharedStyleID;
    shouldBreakMaskChain:  boolean;
    style:                 ValueClass;
    userInfo:              PurpleUserInfo;
}

export enum LayerName {
    Shape = "Shape",
    ShapeCopy = "Shape Copy",
}

export interface Point {
    _class:       PointClass;
    cornerRadius: number;
    curveFrom:    string;
    curveMode:    number;
    curveTo:      string;
    hasCurveFrom: boolean;
    hasCurveTo:   boolean;
    point:        string;
}

export enum PointClass {
    CurvePoint = "curvePoint",
}

export enum PurpleSharedStyleID {
    A04Bef88056749D6Bba4C66E38862714 = "A04BEF88-0567-49D6-BBA4-C66E38862714",
    Cfbbb462B59342E5B45A30D50938F86B = "CFBBB462-B593-42E5-B45A-30D50938F86B",
    D0A0A3FeE8Ea48A2Ba3A9C305Bf2B6E8 = "D0A0A3FE-E8EA-48A2-BA3A-9C305BF2B6E8",
}

export interface ValueClass {
    _class:           ValueClassEnum;
    borderOptions?:   BorderOptions;
    borders?:         Border[];
    endMarkerType:    number;
    miterLimit:       number;
    startMarkerType:  number;
    windingRule:      number;
    do_objectID?:     string;
    textStyle?:       PurpleTextStyle;
    fills?:           Fill[];
    contextSettings?: ContextSettings;
}

export interface PurpleTextStyle {
    _class:            TextStyleClass;
    do_objectID?:      string;
    encodedAttributes: EncodedAttributes;
    verticalAlignment: number;
}

export enum TextStyleClass {
    TextStyle = "textStyle",
}

export interface EncodedAttributes {
    MSAttributedStringColorAttribute:          Color;
    MSAttributedStringFontAttribute:           MSAttributedStringFontAttribute;
    kerning?:                                  number;
    paragraphStyle:                            StickyParagraphStyle;
    textStyleVerticalAlignmentKey?:            number;
    MSAttributedStringTextTransformAttribute?: number;
    strikethroughStyle?:                       number;
    underlineStyle?:                           number;
}

export interface StickyParagraphStyle {
    _class:                                ParagraphStyleClass;
    alignment?:                            number;
    allowsDefaultTighteningForTruncation?: number;
    baseWritingDirection?:                 number;
    maximumLineHeight?:                    number;
    minimumLineHeight?:                    number;
}

export interface PurpleUserInfo {
    "com.animaapp.stc-sketch-plugin": PurpleCOMAnimaappStcSketchPlugin;
}

export interface PurpleCOMAnimaappStcSketchPlugin {
    kModelPropertiesKey: Images;
}

export enum FluffySharedStyleID {
    A04Bef88056749D6Bba4C66E38862714 = "A04BEF88-0567-49D6-BBA4-C66E38862714",
    D0A0A3FeE8Ea48A2Ba3A9C305Bf2B6E8 = "D0A0A3FE-E8EA-48A2-BA3A-9C305BF2B6E8",
    The8196Aefe1C6C401F87D0Ff69B6E13Fdb = "8196AEFE-1C6C-401F-87D0-FF69B6E13FDB",
}

export interface FluffyUserInfo {
    "com.animaapp.stc-sketch-plugin": FluffyCOMAnimaappStcSketchPlugin;
}

export interface FluffyCOMAnimaappStcSketchPlugin {
    kModelPropertiesKey: KModelPropertiesKey;
}

export interface KModelPropertiesKey {
    isAutoWidth?: number;
    constraints?: Constraints;
}

export interface Constraints {
    aspectRatio:   AspectRatio;
    automatic:     number;
    modelID:       string;
    model_class:   ConstraintsModelClass;
    model_version: number;
    scaleFactor:   number;
}

export interface AspectRatio {
    constant:      number;
    enabled:       number;
    modelID:       string;
    model_class:   AspectRatioModelClass;
    model_version: number;
    multiplier:    number;
}

export enum AspectRatioModelClass {
    ADModelConstraint = "ADModelConstraint",
}

export enum ConstraintsModelClass {
    ADModelViewConstraints = "ADModelViewConstraints",
}

export interface OverrideValue {
    _class:       OverrideValueClass;
    overrideName: string;
    value:        string;
    do_objectID?: string;
}

export enum OverrideValueClass {
    OverrideValue = "overrideValue",
}

export interface PurpleStyle {
    _class:           ValueClassEnum;
    borderOptions?:   BorderOptions;
    borders?:         Border[];
    do_objectID?:     string;
    endMarkerType:    number;
    miterLimit:       number;
    startMarkerType:  number;
    windingRule:      number;
    fills?:           Fill[];
    shadows?:         Shadow[];
    contextSettings?: ContextSettings;
    textStyle?:       FluffyTextStyle;
}

export interface FluffyTextStyle {
    _class:            TextStyleClass;
    do_objectID?:      string;
    encodedAttributes: EncodedAttributesClass;
    verticalAlignment: number;
}

export interface TentacledUserInfo {
    "com.animaapp.stc-sketch-plugin": FluffyCOMAnimaappStcSketchPlugin;
    "com.invisionlabs.duplicate"?:    COMInvisionlabsDuplicate;
    "datasupplier.key"?:              string;
}

export interface COMInvisionlabsDuplicate {
    "type-duplicate": TypeDuplicate;
}

export interface TypeDuplicate {
    action: string;
    icon:   string;
    id:     string;
    index:  number;
    title:  string;
}

export interface FluffyStyle {
    _class:           ValueClassEnum;
    borderOptions?:   BorderOptions;
    borders?:         Border[];
    do_objectID?:     string;
    endMarkerType:    number;
    miterLimit:       number;
    startMarkerType:  number;
    windingRule:      number;
    fills?:           Fill[];
    innerShadows?:    Shadow[];
    shadows?:         Shadow[];
    contextSettings?: ContextSettings;
    textStyle?:       FluffyTextStyle;
}

export interface StickyUserInfo {
    "com.animaapp.stc-sketch-plugin": TentacledCOMAnimaappStcSketchPlugin;
}

export interface TentacledCOMAnimaappStcSketchPlugin {
    kModelPropertiesKey:    KModelPropertiesKey;
    animaDetachedSymbolID?: string;
    kViewTypeKey?:          string;
}

export interface Layout {
    _class:                  string;
    columnWidth:             number;
    drawHorizontal:          boolean;
    drawHorizontalLines:     boolean;
    drawVertical:            boolean;
    gutterHeight:            number;
    gutterWidth:             number;
    guttersOutside:          boolean;
    horizontalOffset:        number;
    isEnabled:               boolean;
    numberOfColumns:         number;
    rowHeightMultiplication: number;
    totalWidth:              number;
}

export interface OverrideProperty {
    _class:       OverridePropertyClass;
    canOverride:  boolean;
    overrideName: string;
}

export enum OverridePropertyClass {
    MSImmutableOverrideProperty = "MSImmutableOverrideProperty",
}

export interface OriginalMasterUserInfo {
    "com.animaapp.stc-sketch-plugin": PurpleCOMAnimaappStcSketchPlugin;
    "com.amoreaux.sketch-icons"?:     COMAmoreauxSketchIcons;
}

export interface COMAmoreauxSketchIcons {
    colorPicker: ColorPicker;
    padding:     number;
}

export enum ColorPicker {
    R0G0B0A1 = "{\"r\":0,\"g\":0,\"b\":0,\"a\":1}",
}

export interface SymbolMaster {
    _class:                           OriginalMasterClass;
    allowsOverrides:                  boolean;
    backgroundColor:                  Color;
    booleanOperation:                 number;
    changeIdentifier:                 number;
    clippingMaskMode:                 number;
    do_objectID:                      string;
    exportOptions:                    ExportOptions;
    frame:                            Frame;
    groupLayout:                      OriginalMasterGroupLayout;
    hasBackgroundColor:               boolean;
    hasClickThrough:                  boolean;
    hasClippingMask:                  boolean;
    horizontalRulerData:              AlRulerData;
    includeBackgroundColorInExport:   boolean;
    includeBackgroundColorInInstance: boolean;
    includeInCloudUpload:             boolean;
    isFixedToViewport:                boolean;
    isFlippedHorizontal:              boolean;
    isFlippedVertical:                boolean;
    isFlowHome:                       boolean;
    isLocked:                         boolean;
    isVisible:                        boolean;
    layerListExpandedType:            number;
    layers:                           SymbolMasterLayer[];
    name:                             string;
    nameIsFixed:                      boolean;
    originalObjectID?:                string;
    overrideProperties:               OverrideProperty[];
    resizesContent:                   boolean;
    resizingConstraint:               number;
    resizingType:                     number;
    rotation:                         number;
    shouldBreakMaskChain:             boolean;
    style:                            ValueClass;
    symbolID:                         string;
    userInfo:                         OriginalMasterUserInfo;
    verticalRulerData:                AlRulerData;
    sharedStyleID?:                   string;
    grid?:                            Grid;
    layout?:                          Layout;
}

export interface SymbolMasterLayer {
    _class:                             LayerClass;
    booleanOperation:                   number;
    clippingMaskMode:                   number;
    do_objectID:                        string;
    frame:                              Frame;
    groupLayout?:                       LayerGroupLayout;
    hasClickThrough?:                   boolean;
    hasClippingMask:                    boolean;
    isFixedToViewport:                  boolean;
    isFlippedHorizontal:                boolean;
    isFlippedVertical:                  boolean;
    isLocked:                           boolean;
    isVisible:                          boolean;
    layerListExpandedType?:             number;
    layers?:                            IndigoLayer[];
    name:                               string;
    nameIsFixed:                        boolean;
    resizingConstraint:                 number;
    resizingType:                       number;
    rotation:                           number;
    sharedStyleID?:                     string;
    shouldBreakMaskChain:               boolean;
    style:                              FluffyStyle;
    userInfo?:                          StickyUserInfo;
    windingRule?:                       number;
    edited?:                            boolean;
    fixedRadius?:                       number;
    hasConvertedToNewRoundCorners?:     boolean;
    isClosed?:                          boolean;
    pointRadiusBehaviour?:              number;
    points?:                            Point[];
    horizontalSpacing?:                 number;
    overrideValues?:                    OverrideValue[];
    scale?:                             number;
    symbolID?:                          string;
    verticalSpacing?:                   number;
    attributedString?:                  PurpleAttributedString;
    automaticallyDrawOnUnderlyingPath?: boolean;
    dontSynchroniseWithSymbol?:         boolean;
    glyphBounds?:                       string;
    lineSpacingBehaviour?:              number;
    textBehaviour?:                     number;
    clippingMask?:                      string;
    fillReplacesImage?:                 boolean;
    image?:                             Age;
    intendedDPI?:                       number;
    originalObjectID?:                  string;
    isEquilateral?:                     boolean;
    exportOptions?:                     ExportOptions;
}

export interface IndigoLayer {
    _class:                             LayerClass;
    booleanOperation:                   number;
    clippingMaskMode:                   number;
    do_objectID:                        string;
    edited?:                            boolean;
    frame:                              Frame;
    hasClippingMask:                    boolean;
    isClosed?:                          boolean;
    isFixedToViewport:                  boolean;
    isFlippedHorizontal:                boolean;
    isFlippedVertical:                  boolean;
    isLocked:                           boolean;
    isVisible:                          boolean;
    layerListExpandedType?:             number;
    name:                               string;
    nameIsFixed:                        boolean;
    pointRadiusBehaviour?:              number;
    points?:                            Point[];
    resizingConstraint:                 number;
    resizingType:                       number;
    rotation:                           number;
    shouldBreakMaskChain:               boolean;
    style:                              PurpleStyle;
    userInfo?:                          TentacledUserInfo;
    fixedRadius?:                       number;
    hasConvertedToNewRoundCorners?:     boolean;
    sharedStyleID?:                     string;
    groupLayout?:                       LayerGroupLayout;
    hasClickThrough?:                   boolean;
    layers?:                            IndecentLayer[];
    horizontalSpacing?:                 number;
    overrideValues?:                    OverrideValue[];
    scale?:                             number;
    symbolID?:                          string;
    verticalSpacing?:                   number;
    attributedString?:                  PurpleAttributedString;
    automaticallyDrawOnUnderlyingPath?: boolean;
    dontSynchroniseWithSymbol?:         boolean;
    glyphBounds?:                       string;
    lineSpacingBehaviour?:              number;
    textBehaviour?:                     number;
    originalObjectID?:                  string;
    windingRule?:                       number;
    isEquilateral?:                     boolean;
}

export interface IndecentLayer {
    _class:                             LayerClass;
    booleanOperation:                   number;
    clippingMaskMode:                   number;
    do_objectID:                        string;
    frame:                              Frame;
    groupLayout?:                       LayerGroupLayout;
    hasClickThrough?:                   boolean;
    hasClippingMask:                    boolean;
    isFixedToViewport:                  boolean;
    isFlippedHorizontal:                boolean;
    isFlippedVertical:                  boolean;
    isLocked:                           boolean;
    isVisible:                          boolean;
    layerListExpandedType?:             number;
    layers?:                            HilariousLayer[];
    name:                               string;
    nameIsFixed:                        boolean;
    resizingConstraint:                 number;
    resizingType:                       number;
    rotation:                           number;
    sharedStyleID?:                     string;
    shouldBreakMaskChain:               boolean;
    style:                              ValueClass;
    userInfo?:                          FluffyUserInfo;
    windingRule?:                       number;
    edited?:                            boolean;
    fixedRadius?:                       number;
    hasConvertedToNewRoundCorners?:     boolean;
    isClosed?:                          boolean;
    pointRadiusBehaviour?:              number;
    points?:                            Point[];
    horizontalSpacing?:                 number;
    originalObjectID?:                  string;
    overrideValues?:                    OverrideValue[];
    scale?:                             number;
    symbolID?:                          string;
    verticalSpacing?:                   number;
    attributedString?:                  FluffyAttributedString;
    automaticallyDrawOnUnderlyingPath?: boolean;
    dontSynchroniseWithSymbol?:         boolean;
    glyphBounds?:                       string;
    lineSpacingBehaviour?:              number;
    textBehaviour?:                     number;
}

export interface HilariousLayer {
    _class:                             LayerClass;
    booleanOperation:                   number;
    clippingMaskMode:                   number;
    do_objectID:                        string;
    edited?:                            boolean;
    frame:                              Frame;
    hasClippingMask:                    boolean;
    isClosed?:                          boolean;
    isFixedToViewport:                  boolean;
    isFlippedHorizontal:                boolean;
    isFlippedVertical:                  boolean;
    isLocked:                           boolean;
    isVisible:                          boolean;
    layerListExpandedType:              number;
    name:                               string;
    nameIsFixed:                        boolean;
    pointRadiusBehaviour?:              number;
    points?:                            Point[];
    resizingConstraint:                 number;
    resizingType:                       number;
    rotation:                           number;
    shouldBreakMaskChain:               boolean;
    style:                              ValueClass;
    userInfo?:                          FluffyUserInfo;
    sharedStyleID?:                     FluffySharedStyleID;
    fixedRadius?:                       number;
    hasConvertedToNewRoundCorners?:     boolean;
    horizontalSpacing?:                 number;
    overrideValues?:                    any[];
    scale?:                             number;
    symbolID?:                          string;
    verticalSpacing?:                   number;
    attributedString?:                  TentacledAttributedString;
    automaticallyDrawOnUnderlyingPath?: boolean;
    dontSynchroniseWithSymbol?:         boolean;
    glyphBounds?:                       string;
    lineSpacingBehaviour?:              number;
    textBehaviour?:                     number;
    groupLayout?:                       LayerGroupLayout;
    hasClickThrough?:                   boolean;
    layers?:                            StickyLayer[];
    windingRule?:                       number;
}

export interface ForeignTextStyle {
    _class:            ForeignTextStyleClass;
    libraryID:         ForeignTextStyleLibraryID;
    localSharedStyle:  ForeignTextStyleLocalSharedStyle;
    remoteStyleID:     string;
    sourceLibraryName: string;
    symbolPrivate:     boolean;
}

export enum ForeignTextStyleClass {
    MSImmutableForeignTextStyle = "MSImmutableForeignTextStyle",
}

export enum ForeignTextStyleLibraryID {
    D3864E1BF8804A20Bcd6Eee748F8D86A = "D3864E1B-F880-4A20-BCD6-EEE748F8D86A",
    The8733Ffc44B0F40718Ea3C609077E9A4F = "8733FFC4-4B0F-4071-8EA3-C609077E9A4F",
}

export interface ForeignTextStyleLocalSharedStyle {
    _class:      LocalSharedStyleClass;
    do_objectID: string;
    name:        string;
    value:       PurpleValue;
}

export interface PurpleValue {
    _class:           ValueClassEnum;
    contextSettings?: ContextSettings;
    endMarkerType:    number;
    miterLimit:       number;
    startMarkerType:  number;
    textStyle:        FluffyTextStyle;
    windingRule:      number;
}

export interface LayerS {
    _class:  string;
    objects: LocalSharedStyle[];
}

export interface LayerTextStyles {
    _class:  string;
    objects: Object[];
}

export interface Object {
    _class:      LocalSharedStyleClass;
    do_objectID: string;
    name:        string;
    value:       ValueClass;
}
